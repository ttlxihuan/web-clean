// 配置说明，版本 html-minifier-terser 7.2.0
const { minify } = require('html-minifier-terser');

module.exports.options = {
    /* 非公开配置选项 */
    name: Function(name),       // 标签名处理，大小写转换等
    // 可以折叠标签内部的空格，返回 true 表示该标签可以折叠空格（受 preserveLineBreaks 配置影响）
    //  参数说明：
    //      tag                     标签名
    //      attrs                   属性集
    //      canCollapseWhitespace   内置是否可折叠判断函数（非 script|style|pre|textarea 标签）
    canCollapseWhitespace: Function(tag, attrs, canCollapseWhitespace),
    // 可以去掉标签内部的空格，返回 true 表示该标签可以删除空格（受 collapseWhitespace 配置影响）
    //  参数说明：
    //      tag                     标签名
    //      attrs                   属性集
    //      canTrimWhitespace       内置是否可删除判断函数（非 pre|textarea 标签）
    canTrimWhitespace: Function(tag, attrs, canTrimWhitespace),
    /* 公开配置选项 */
    caseSensitive: false, // 以区分大小写的方式处理属性（适用于自定义 HTML 标记）
    collapseBooleanAttributes: false, // 从布尔属性中省略属性值
    collapseInlineTagWhitespace: false, // 折叠时不要在元素之间留任何空格
    collapseWhitespace: false, // 折叠文档树中文本节点的空白区域
    conservativeCollapse: false, // 始终折叠到 1 个空格（永远不要完全删除它）。必须与 collapseWhitespace=true
    continueOnParseError: false, // 处理解析错误，而不是中止。
    // 配置自定义属性赋值符号正则表达式，标签属性赋值使用的是 =
    // 属性匹配是通过正则提取的，
    //      默认正则是   /^\s*([^\s"'<>/=]+)(?:\s*((?:=))[ \t\n\f\r]*(?:"([^"]*)"+|'([^']*)'+|([^ \t\n\f\r"'`=<>]+)))?/
    //      自定义赋值正则会嵌入到 (?:\s*((?:=)) 中，由于赋值前面属性名正则是贪婪模式，所有后面的赋值符号会受影响
    customAttrAssign: [], // 允许支持自定义属性赋值表达式的正则表达式数组
    // 配置去掉自定义属性（正则表达式）的换行符，当 conservativeCollapse 有效时换行符替换为空格，否则替换为空
    // 此配置用于一些自定义属性，比如：ng-class
    customAttrCollapse: [],
    // 配置自定义属性环绕正则表达式，用于嵌入到模板引擎中（建议使用 ignoreCustomFragments），（例如<input {{#if value}}checked="checked"{{/if}}>)
    // 每个配置项必需包含属性前后正则
    // 配置示例： [  [/\{\{.*?\}\}/, /\{\{.*?\}\}/]  ]
    customAttrSurround: [],
    // 配置自定义事件属性正则表达式集，用于将事件内的代码进行js压缩处理（例如 minifyJS ng-click)，默认会匹配 on 开头的属性
    // 配置示例： [ /ng-click/, /ng-model/ ]
    customEventAttributes: [],
    decodeEntities: false, // 尽可能使用直接 Unicode 字符
    html5: true, // 根据 HTML5 规范解析输入
    // 配置忽略正则表达式匹配的注释（默认注释里是 ! 或 # 开头的注释保留）
    // 默认配置项 [ /^!/, /^\s*#/ ]
    ignoreCustomComments: [],
    // 配置忽略正则表达式匹配的代码段，不参与语法校验处理，比如内嵌的 <?php ... ?>
    // 默认配置项 [ /<%[\s\S]*?%>/, /<\?[\s\S]*?\?>/ ]
    ignoreCustomFragments: [],
    includeAutoGeneratedTags: true, // 自动补充未关闭的标签（只针对非单标签）
    keepClosingSlash: false, // 在单例元素上保留尾部斜杠（原代码中没有则不添加斜杠）
    maxLineLength: 0, // 指定最大线条长度。压缩输出将在有效的 HTML 分割点处按换行符进行分割
    // 是否使用css压缩处理器
    // 可选值：
    //      false           禁用压缩处理器
    //      true            启用压缩器（clean-css），压缩选项使用默认的
    //      {}              启用压缩器（clean-css），并指定压缩选项
    //      Function(text, type)
    //                      启用压缩器，并指定压缩处理器函数
    //                          text    要压缩的代码
    //                          type    指定代码来源类型：inline（style属性行内样式）、media（link或style标签样式）、undefined（style标签样式）
    minifyCSS: false || true || {} || Function(text, type),
    // 是否使用js压缩处理器
    // 可选值：
    //      false           禁用压缩处理器
    //      true            启用压缩器（Terser），压缩选项使用默认的
    //      {}              启用压缩器（Terser），并指定压缩选项
    //      Function(text, inline)
    //                      启用压缩器，并指定压缩处理器函数
    //                          text    要压缩的代码
    //                          inline  是否为行内代码（即属性代码），行内代码允许使用return，可用于 parse.bare_returns 选项
    minifyJS: false || true || {} || Function(text, type),
    // 是否使用url压缩处理器
    // 可选值：
    //      false           禁用压缩处理器
    //      true            启用压缩器（relateurl），压缩选项使用默认的
    //      {}              启用压缩器（relateurl），并指定压缩选项
    //      Function(text)
    //                      启用压缩器，并指定压缩处理器函数
    //                          text    要压缩的代码
    minifyURLs: false || true || {} || Function(text),
    noNewlinesBeforeTagClose: false, // 切勿在结束元素的标签前添加换行符
    preserveLineBreaks: false, // 当标签之间的空格包含换行符时，始终折叠为 1 个换行符（切勿完全删除它）。必须与 collapseWhitespace=true
    preventAttributesEscaping: false, // 防止属性值转义
    processConditionalComments: false, // 通过缩小器处理条件注释的内容
    processScripts: [], // 与要通过缩小器处理的脚本元素类型（例如 ， ， 等）相对应的字符串数组text/ng-template,text/x-handlebars-template
    quoteCharacter: undefined || '"' || "'", // 用于属性值（' 或 “）的引号类型
    removeAttributeQuotes: false, // 尽可能删除属性周围的引号
    removeComments: false, // 剥离 HTML 注释
    // 删除所有具有仅空格或空值的属性
    // 可选值：
    //      false           不删除空属性
    //      true            删除所有仅空格的属性
    //      Function(attrName, tag)
    //                      回调器判断是否删除属性，返回 false 为保留，true为删除
    //                          attrName    属性名
    //                          tag         标签名
    removeEmptyAttributes: false || true || Function(attrName, tag), // 删除所有具有仅空格值的属性
    removeEmptyElements: false, // 删除所有内容为空的元素
    removeOptionalTags: false, // 删除可选标记
    removeRedundantAttributes: false, // 当 value 与 default 匹配时删除属性。
    removeScriptTypeAttributes: false, // 删除script标签的type属性
    removeStyleLinkTypeAttributes: false, // 删除link标签的type属性
    removeTagWhitespace: false, // 尽可能删除属性之间的空格。请注意，这将导致无效的 HTML！
    sortAttributes: false, // 	按频率对属性进行排序
    sortClassName: false, // 按频率对样式类进行排序
    trimCustomFragments: false, // 修剪 周围的空白区域。ignoreCustomFragments
    useShortDoctype: false // 将 doctype 替换为短 （HTML5） doctype
}

module.exports.run = async function (code, options) {
    await minify(code, options);
}
